{"version":3,"sources":["components/Card/Card.jsx","components/CardList/CardList.jsx","components/SearchBox/SearchBox.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","contact","className","alt","src","id","name","email","CardList","contacts","map","key","SearchBox","handleChange","placeholder","type","onChange","App","state","searchField","event","value","target","setState","fetch","response","json","this","filteredContacts","filter","toLowerCase","includes","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"2VAaeA,G,MAVF,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACf,OACE,yBAAKC,UAAU,kBACb,yBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAQI,GAAlC,6BACtB,4BAAKJ,EAAQK,MACb,2BAAIL,EAAQM,UCIDC,G,MARE,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SACjB,OACA,yBAAKP,UAAU,aACXO,EAASC,KAAI,SAACT,GAAD,OAAa,kBAAC,EAAD,CAAMU,IAAKV,EAAQI,GAAIJ,QAASA,UCEjDW,G,MANG,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,aAAcC,EAAkB,EAAlBA,YACjC,OACE,2BAAOZ,UAAU,SAASa,KAAK,SAASD,YAAaA,EAAaE,SAAUH,MCsCjEI,G,iNArCbC,MAAQ,CACNT,SAAU,GACVU,YAAa,I,EASfN,aAAe,SAAAO,GAAU,IAEXC,EACRD,EADFE,OAAUD,MAEZ,EAAKE,SAAS,CAAEJ,YAAaE,K,qNATNG,MAAM,8C,cAAvBC,E,gBACiBA,EAASC,O,OAA1BjB,E,OACNkB,KAAKJ,SAAS,CAAEd,a,qIAUR,IAENI,EAEEc,KAFFd,aAFK,EAIHc,KADFT,MAAST,EAHJ,EAGIA,SAAUU,EAHd,EAGcA,YAEfS,EAAmBnB,EAASoB,QAAO,SAAA5B,GAAO,OAC9CA,EAAQK,KAAKwB,cAAcC,SAASZ,EAAYW,kBAGlD,OACE,yBAAK5B,UAAU,OACb,uCACA,kBAAC,EAAD,CAAWY,YAAY,kBAAkBD,aAAcA,IACvD,kBAAC,EAAD,CAAUJ,SAAUmB,S,GAhCVI,cCOZC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB9B,QACfwB,UAAUC,cAAcQ,YAI1BC,QAAQC,IACN,iHAKEZ,GAAUA,EAAOa,UACnBb,EAAOa,SAASR,KAMlBM,QAAQC,IAAI,sCAGRZ,GAAUA,EAAOc,WACnBd,EAAOc,UAAUT,WAO5BU,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MC1FjEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDgB1C,SAAkBpB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIoB,IAAIC,WAAwB5B,OAAOC,SAAS4B,MACpDC,SAAW9B,OAAOC,SAAS6B,OAIvC,OAGF9B,OAAO+B,iBAAiB,QAAQ,WAC9B,IAAM1B,EAAK,UAAMuB,WAAN,sBAEP9B,IAgEV,SAAiCO,EAAOC,GAEtCjB,MAAMgB,GACHK,MAAK,SAAApB,GAEJ,IAAM0C,EAAc1C,EAAS2C,QAAQC,IAAI,gBAEnB,MAApB5C,EAAS6C,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5C7B,UAAUC,cAAc6B,MAAM3B,MAAK,SAAAC,GACjCA,EAAa2B,aAAa5B,MAAK,WAC7BV,OAAOC,SAASsC,eAKpBnC,EAAgBC,EAAOC,MAG1Be,OAAM,WACLJ,QAAQC,IACN,oEArFAsB,CAAwBnC,EAAOC,GAI/BC,UAAUC,cAAc6B,MAAM3B,MAAK,WACjCO,QAAQC,IACN,iHAMJd,EAAgBC,EAAOC,OCvC/BE,K","file":"static/js/main.d39f0c42.chunk.js","sourcesContent":["import React from 'react';\nimport './Card.css'\n\nconst Card = ({contact}) => {\nreturn (\n  <div className=\"card-container\">\n    <img alt=\"contact\" src={`https://robohash.org/${contact.id}2?set=set5&size=180x180`}/>\n    <h2>{contact.name}</h2>\n    <p>{contact.email}</p>\n    </div>\n  )\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from '../Card/Card'\nimport './CardList.css'\n\nconst CardList = ({contacts}) => {\n  return (\n  <div className=\"card-list\">\n     {contacts.map((contact) => <Card key={contact.id} contact={contact}/> )}\n  </div>\n  )\n}\n\nexport default CardList;\n","import React from 'react';\nimport './SearchBox.css';\n\nconst SearchBox = ({ handleChange, placeholder }) => {\n  return (\n    <input className=\"search\" type=\"search\" placeholder={placeholder} onChange={handleChange} />\n  );\n};\n\nexport default SearchBox;\n","import React, { Component } from 'react';\nimport CardList from './components/CardList/CardList';\nimport SearchBox from './components/SearchBox/SearchBox';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    contacts: [],\n    searchField: ''\n  };\n\n  async componentDidMount() {\n    const response = await fetch('https://jsonplaceholder.typicode.com/users');\n    const contacts = await response.json();\n    this.setState({ contacts });\n  }\n\n  handleChange = event => {\n    const {\n      target: { value }\n    } = event;\n    this.setState({ searchField: value });\n  };\n\n  render() {\n    const {\n      handleChange,\n      state: { contacts, searchField }\n    } = this;\n    const filteredContacts = contacts.filter(contact =>\n      contact.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n\n    return (\n      <div className=\"App\">\n        <h1>Rolodex</h1>\n        <SearchBox placeholder=\"Search Contacts\" handleChange={handleChange} />\n        <CardList contacts={filteredContacts} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}